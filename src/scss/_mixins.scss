// ==========================================================================
// Breakpoints
// ==========================================================================

@function breakpoint-min($number) {
  @return $number + 0;
}

@function breakpoint-max($number) {
  @return $number - .02;
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min == 0 or $min == null, "", "-#{$name}");
}

@function get-width($width) {
  @if (type-of($width) == "number") {
    @return $width;
  }

  @if (type-of($width) == "string") {
    $breakpoints: $grid-breakpoints;
    @if (not $breakpoints or type-of($breakpoints) != "map") {
      @return null;
    }
    $w: map-get($breakpoints, $width);
    @return $w;
  }

  @return null;
}

@mixin media-breakpoint-up($width) {
  $width: get-width($width);

  // `$width` != `0|xs`
  @if ($width != 0) {
    @media (min-width: breakpoint-min($width)) {
      @content;
    }
  }

  // `$width` == `0|xs`
  @if ($width == 0) {
    @content;
  }
}

@mixin media-breakpoint-down($width) {
  $breakpoints: $grid-breakpoints;
  $breakpoint-names: map-keys($breakpoints);
  $n: index($breakpoint-names, $width);

  // `$width` != `xl`
  @if ($width != nth($breakpoint-names, length($breakpoint-names))) {
    $width: get-width($width);
    @if ($n != null and $n < length($breakpoint-names)) {
      $width: get-width(nth($breakpoint-names, $n + 1));
    }
  }
  // `$width` == `xl`
  @else {
    $width: false;
  }

  // `$width` != `xl`
  @if ($width != false) {
    @media (max-width: breakpoint-max($width)) {
      @content;
    }
  }
}

@mixin media-breakpoint-between($min, $max) {
  $min: get-width($min);
  $max: get-width($max);

  // `$min` == `0|xs`
  // `$max` != `0|xs`
  @if ($min == 0 and $max != 0) {
    @media (max-width: breakpoint-max($max)) {
      @content;
    }
  }

  // `$min` != `0|xs`
  // `$max` != `$min`
  // `$max` > `$min`
  @if ($min != 0 and $max != $min and $max > $min) {
    @media (min-width: breakpoint-min($min)) and (max-width: breakpoint-max($max)) {
      @content;
    }
  }
}

// ==========================================================================
// Grid
// ==========================================================================

//
// cons
//

@mixin make-con($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
  margin-right: auto;
  margin-left: auto;
}

@mixin make-con-max-widths($max-widths: $con-max-widths) {
  @each $breakpoint, $con-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $con-max-width;
    }
  }
}

//
// Row
//

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}

//
// Columns
//

@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    @include media-breakpoint-up($breakpoint) {
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%;
      }
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }
    }
  }
}
